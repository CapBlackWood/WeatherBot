package bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.*
import com.github.kotlintelegrambot.entities.ChatAction
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.extensions.filters.Filter
import com.github.kotlintelegrambot.logging.LogLevel
import data.remote.API_KEY
import data.remote.repository.WeatherRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

private const val IS_DAY = 1

private const val GIF_WAITING_URL = "https://tenor.com/ru/view/waiting-waiting-patiently-waiting-for-you-waiting-on-you-gif-15489516379864441176"
private const val BOT_ANSWER_TIMEOUT = 30
private const val BOT_TOKEN = "6813495714:AAHpI4VqyisnaNBSfp87CzD3KQXGDaCJyVE"


class WeatherBot(private val weatherRepository: WeatherRepository) {

    private lateinit var country: String
    private var _chatId: ChatId? = null
    private val chatId by lazy { requireNotNull(_chatId) }


    fun createBot(): Bot {
        return bot {
            timeout = BOT_ANSWER_TIMEOUT
            token = BOT_TOKEN
            logLevel = LogLevel.Error

            dispatch {
                setUpCommands()
                setUpCallbacks()
            }
        }
    }

    private fun Dispatcher.setUpCallbacks() {
        callbackQuery(callbackData = "getMyLocation") {
            bot.sendMessage(
                chatId = chatId,
                text = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é"
            )
            location {
                CoroutineScope(Dispatchers.IO).launch {
                    val userCountry = weatherRepository.getReverseGeoCodingCountryName(
                        location.latitude.toString(), location.longitude.toString(),
                        "json"
                    ).address.country

                    country = userCountry

                    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                        listOf(
                            InlineKeyboardButton.CallbackData(
                                text = " –î–∞, –≤–µ—Ä–Ω–æ",
                                callbackData = "yes_label"
                            )
                        )
                    )

                    bot.sendMessage(
                        chatId = chatId,
                        text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - ${country}, –≤–µ—Ä–Ω–æ? \n –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, —Å–∫–∏–Ω—å –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑",
                        replyMarkup = inlineKeyboardMarkup
                    )
                }
            }
        }

        callbackQuery(callbackData = "enterManually") {
            bot.sendMessage(
                chatId = chatId,
                text = "–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥."
            )
            message(Filter.Text) {
                country = message.text.toString()

                val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                    listOf(
                        InlineKeyboardButton.CallbackData(
                            text = " –î–∞, –≤–µ—Ä–Ω–æ",
                            callbackData = "yes_label"
                        )
                    )
                )

                bot.sendMessage(
                    chatId = chatId,
                    text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - ${country}, –≤–µ—Ä–Ω–æ? \n –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑.",
                    replyMarkup = inlineKeyboardMarkup
                )
            }
        }

        callbackQuery(callbackData = "yes_label"){
            bot.apply {
                sendAnimation(
                    chatId = chatId,
                    animation = TelegramFile.ByUrl(GIF_WAITING_URL)
                )
                bot.sendMessage(
                    chatId = chatId,
                    text = "–£–∑–Ω–∞–µ–º –≤–∞—à—É –ø–æ–≥–æ–¥—É..."
                )
                sendChatAction(
                    chatId = chatId,
                    action = ChatAction.TYPING
                )
            }
            CoroutineScope(Dispatchers.IO).launch {
                val currentWeather = weatherRepository.getCurrentWeather(
                    apiKey = API_KEY,
                    countryName = country,
                    airQualityData = "no"
                )
                bot.sendMessage(
                    chatId = chatId,
                    text = """
                        ‚òÅ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${currentWeather.current.cloud}
                            üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≥—Ä–∞–¥—É—Å—ã): ${currentWeather.current.tempDegrees}
                            üôé ‚Äç–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${currentWeather.current.feelsLikeDegrees}
                            üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${currentWeather.current.humidity}
                            üå™ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: ${currentWeather.current.windDirection}
                            üß≠ –î–∞–≤–ª–µ–Ω–∏–µ: ${currentWeather.current.pressureIn}
                            üåì –°–µ–π—á–∞—Å –¥–µ–Ω—å? ${if (currentWeather.current.isDay == IS_DAY) "–î–∞" else "–ù–µ—Ç"}
                    """.trimIndent()
                )

                bot.sendMessage(
                    chatId = chatId,
                    text = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É –µ—â–µ —Ä–∞–∑, \n –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /weather"
                )
                country = ""
            }
        }
    }

    private fun Dispatcher.setUpCommands() {
        command("start") {
            _chatId = ChatId.fromId(message.chat.id)
            bot.sendMessage(
                chatId = chatId,
                text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —É–º–µ—é—â–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–≥–æ–¥—É! \n –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /weather"
            )
        }
        command("weather") {
            val inLineKeyboardMarkup = InlineKeyboardMarkup.create(
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π –≥–æ—Ä–æ–¥ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)",
                        callbackData = "getMyLocation"
                    )
                ),
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é",
                        callbackData = "enterManually"
                    )
                )
            )

            bot.sendMessage(
                chatId = chatId,
                text = "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É, \n –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥.",
                replyMarkup = inLineKeyboardMarkup
            )
        }
    }
}

